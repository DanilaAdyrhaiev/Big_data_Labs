import numpy as np
from sklearn.datasets import fetch_openml
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from PIL import Image
import matplotlib.pyplot as plt
import random

# --- 1. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö ---
X, y = fetch_openml('mnist_784', version=1, return_X_y=True, as_frame=False)
X = X / 255.0

encoder = OneHotEncoder(sparse_output=False)
y_onehot = encoder.fit_transform(y.reshape(-1, 1))

X_train, X_test, y_train, y_test = train_test_split(X, y_onehot, test_size=0.2)

# --- 2. –ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞ –º–µ—Ä–µ–∂—ñ ---
input_size = 784
hidden_size = 128
output_size = 10

# --- –ê–∫—Ç–∏–≤–∞—Ü—ñ–π–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ---
def relu(x):
    return np.maximum(0, x)

def relu_derivative(x):
    return (x > 0).astype(float)

def softmax(z):
    exp = np.exp(z - np.max(z, axis=1, keepdims=True))
    return exp / np.sum(exp, axis=1, keepdims=True)

def cross_entropy(preds, targets):
    return -np.mean(np.sum(targets * np.log(preds + 1e-9), axis=1))

def prepare_image(image_path):
    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        img = Image.open(image_path).convert('L')  # 'L' ‚Äî —Ü–µ —Ä–µ–∂–∏–º –≤ –≥—Ä–∞–¥–∞—Ü—ñ—è—Ö —Å—ñ—Ä–æ–≥–æ
        img = img.resize((28, 28))  # –ó–º—ñ–Ω—é—î–º–æ —Ä–æ–∑–º—ñ—Ä –¥–æ 28x28

        # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É –º–∞—Å–∏–≤ numpy —ñ –º–∞—Å—à—Ç–∞–±—É—î–º–æ –ø—ñ–∫—Å–µ–ª—ñ (0-255 -> 0-1)
        img_array = np.array(img) / 255.0

        # –†–æ–∑–≤'—è–∑—É—î–º–æ —Ä–æ–∑–º—ñ—Ä–Ω—ñ—Å—Ç—å, —Ç–∞–∫ —â–æ–± –≤—Ö—ñ–¥ –≤ –º–æ–¥–µ–ª—å –±—É–≤ 1x784
        img_array = img_array.flatten().reshape(1, -1)
        
        return img_array, img
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
        return None, None

def test_image(image_path, W1, b1, W2, b2):
    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    img_array, img = prepare_image(image_path)
    
    if img_array is None:
        return
    
    # –ü—Ä—è–º–∏–π –ø—Ä–æ—Ö—ñ–¥ —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å
    z1 = np.dot(img_array, W1) + b1
    a1 = relu(z1)
    z2 = np.dot(a1, W2) + b2
    probs = softmax(z2)

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è (–Ω–æ–º–µ—Ä –∫–ª–∞—Å—É –∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—é –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—é)
    predicted_class = np.argmax(probs, axis=1)[0]
    
    # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è
    plt.figure(figsize=(6, 6))
    plt.imshow(img, cmap='gray')
    plt.title(f"–ü–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è: {predicted_class}")
    plt.axis('off')
    plt.show()
    
    # –í–∏–≤–æ–¥–∏–º–æ –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ –¥–ª—è –≤—Å—ñ—Ö —Ü–∏—Ñ—Ä
    print(f"–ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–¥–±–∞—á–∞—î —Ü–∏—Ñ—Ä—É: {predicted_class}")
    print("\n–ô–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ –¥–ª—è –∫–æ–∂–Ω–æ—ó —Ü–∏—Ñ—Ä–∏:")
    for digit, prob in enumerate(probs[0]):
        print(f"–¶–∏—Ñ—Ä–∞ {digit}: {prob*100:.2f}%")

def visualize_test_samples(W1, b1, W2, b2, n_samples=5):
    # –í–∏–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ –∑—Ä–∞–∑–∫–∏ –∑ —Ç–µ—Å—Ç–æ–≤–æ—ó –≤–∏–±—ñ—Ä–∫–∏
    indices = random.sample(range(X_test.shape[0]), n_samples)
    
    plt.figure(figsize=(15, 3))
    for i, idx in enumerate(indices):
        # –û—Ç—Ä–∏–º—É—î–º–æ –∑—Ä–∞–∑–æ–∫
        sample = X_test[idx]
        true_label = np.argmax(y_test[idx])
        
        # –†–æ–±–∏–º–æ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è
        z1 = np.dot(sample.reshape(1, -1), W1) + b1
        a1 = relu(z1)
        z2 = np.dot(a1, W2) + b2
        probs = softmax(z2)
        predicted_label = np.argmax(probs, axis=1)[0]
        
        # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        plt.subplot(1, n_samples, i+1)
        plt.imshow(sample.reshape(28, 28), cmap='gray')
        title_color = 'green' if predicted_label == true_label else 'red'
        plt.title(f"–ü—Ä–æ–≥–Ω–æ–∑: {predicted_label}\n–§–∞–∫—Ç–∏—á–Ω–æ: {true_label}", color=title_color)
        plt.axis('off')
    
    plt.tight_layout()
    plt.show()

# --- 3. –ú–µ–Ω—é ---
print("1. –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ")
print("2. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ—ó –º–æ–¥–µ–ª—ñ")
print("3. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–ª–∞—Å–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
print("4. –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –ø—Ä–∏–∫–ª–∞–¥—ñ–≤")
choice = input("–û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç (1/2/3/4): ")

if choice == '1':
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–∞–≥
    W1 = np.random.randn(input_size, hidden_size) * np.sqrt(2. / input_size)
    b1 = np.zeros((1, hidden_size))
    W2 = np.random.randn(hidden_size, output_size) * np.sqrt(2. / hidden_size)
    b2 = np.zeros((1, output_size))

    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –Ω–∞–≤—á–∞–Ω–Ω—è
    lr = 0.1
    epochs = 400
    batch_size = 64  # –§—ñ–∫—Å–æ–≤–∞–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –±–∞—Ç—á—É

    # --- –ù–∞–≤—á–∞–Ω–Ω—è ---
    for epoch in range(epochs):
        # –ü–µ—Ä–µ–º—ñ—à—É—î–º–æ –¥–∞–Ω—ñ –ø–µ—Ä–µ–¥ –∫–æ–∂–Ω–æ—é –µ–ø–æ—Ö–æ—é
        indices = np.random.permutation(X_train.shape[0])
        X_shuffled = X_train[indices]
        y_shuffled = y_train[indices]
        
        total_loss = 0
        batches = 0
        
        for i in range(0, X_train.shape[0], batch_size):
            X_batch = X_shuffled[i:i+batch_size]
            y_batch = y_shuffled[i:i+batch_size]
            
            if X_batch.shape[0] < 2:  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥—É–∂–µ –º–∞–ª—ñ –±–∞—Ç—á—ñ
                continue

            # –ü—Ä—è–º–∏–π –ø—Ä–æ—Ö—ñ–¥
            z1 = np.dot(X_batch, W1) + b1
            a1 = relu(z1)
            z2 = np.dot(a1, W2) + b2
            probs = softmax(z2)

            # –í—Ç—Ä–∞—Ç–∞
            loss = cross_entropy(probs, y_batch)
            total_loss += loss
            batches += 1

            # –ó–≤–æ—Ä–æ—Ç–Ω–∏–π –ø—Ä–æ—Ö—ñ–¥
            dL_dz2 = probs - y_batch
            dW2 = np.dot(a1.T, dL_dz2) / X_batch.shape[0]
            db2 = np.mean(dL_dz2, axis=0, keepdims=True)

            dL_da1 = np.dot(dL_dz2, W2.T)
            dL_dz1 = dL_da1 * relu_derivative(z1)
            dW1 = np.dot(X_batch.T, dL_dz1) / X_batch.shape[0]
            db1 = np.mean(dL_dz1, axis=0, keepdims=True)

            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∞–≥
            W2 -= lr * dW2
            b2 -= lr * db2
            W1 -= lr * dW1
            b1 -= lr * db1
        
        # –í–∏–≤–æ–¥–∏–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∫–æ–∂–Ω—ñ 10 –µ–ø–æ—Ö
        if (epoch + 1) % 10 == 0 or epoch == 0:
            avg_loss = total_loss / max(1, batches)
            print(f"Epoch {epoch+1}/{epochs}, Loss: {avg_loss:.4f}")

    # --- –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è ---
    np.savez('model_weights.npz', W1=W1, b1=b1, W2=W2, b2=b2)
    print("‚úÖ –ú–æ–¥–µ–ª—å –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —É 'model_weights.npz'.")

    # –û—Ü—ñ–Ω–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç—ñ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º—É –Ω–∞–±–æ—Ä—ñ
    z1_test = np.dot(X_test, W1) + b1
    a1_test = relu(z1_test)
    z2_test = np.dot(a1_test, W2) + b2
    preds = np.argmax(softmax(z2_test), axis=1)
    true = np.argmax(y_test, axis=1)

    accuracy = np.mean(preds == true)
    print(f"üéØ –¢–æ—á–Ω—ñ—Å—Ç—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º—É –Ω–∞–±–æ—Ä—ñ: {accuracy * 100:.2f}%")
    
    # –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –∫—ñ–ª—å–∫–æ—Ö –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ –ø—ñ—Å–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è
    print("\n–í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–∏—Ö –ø—Ä–∏–∫–ª–∞–¥–∞—Ö:")
    visualize_test_samples(W1, b1, W2, b2, n_samples=5)

elif choice == '2':
    try:
        # --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ---
        model = np.load('model_weights.npz')
        W1 = model['W1']
        b1 = model['b1']
        W2 = model['W2']
        b2 = model['b2']

        # --- –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è ---
        z1_test = np.dot(X_test, W1) + b1
        a1_test = relu(z1_test)
        z2_test = np.dot(a1_test, W2) + b2
        preds = np.argmax(softmax(z2_test), axis=1)
        true = np.argmax(y_test, axis=1)

        accuracy = np.mean(preds == true)
        print(f"üéØ –¢–æ—á–Ω—ñ—Å—Ç—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º—É –Ω–∞–±–æ—Ä—ñ: {accuracy * 100:.2f}%")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –º–∞—Ç—Ä–∏—Ü—é –ø–æ–º–∏–ª–æ–∫ (—è–∫—ñ —Ü–∏—Ñ—Ä–∏ –º–æ–¥–µ–ª—å –ø–ª—É—Ç–∞—î)
        confusion = np.zeros((10, 10), dtype=int)
        for i in range(len(preds)):
            confusion[true[i]][preds[i]] += 1
            
        print("\n–ú–∞—Ç—Ä–∏—Ü—è –ø–æ–º–∏–ª–æ–∫:")
        print("  ", end="")
        for i in range(10):
            print(f"  {i}  ", end="")
        print("\n")
        
        for i in range(10):
            print(f"{i} ", end="")
            for j in range(10):
                if i == j:
                    print(f"[{confusion[i][j]:3d}]", end=" ")
                else:
                    print(f" {confusion[i][j]:3d} ", end=" ")
            print()

    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª –∑ –º–æ–¥–µ–ª–ª—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç—Ä–µ–Ω—É–π—Ç–µ –º–æ–¥–µ–ª—å (–ø—É–Ω–∫—Ç 1).")
    except Exception as e:
        print(f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –º–æ–¥–µ–ª—ñ: {e}")

elif choice == '3':
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–∞ –≤–ª–∞—Å–Ω–æ–º—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ
    image_path = input("–í–≤–µ–¥—ñ—Ç—å —à–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: ")
    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –º–æ–¥–µ–ª—å
        model = np.load('model_weights.npz')
        W1 = model['W1']
        b1 = model['b1']
        W2 = model['W2']
        b2 = model['b2']

        # –¢–µ—Å—Ç—É—î–º–æ –Ω–∞ –≤–ª–∞—Å–Ω–æ–º—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ
        test_image(image_path, W1, b1, W2, b2)

    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª –∑ –º–æ–¥–µ–ª–ª—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç—Ä–µ–Ω—É–π—Ç–µ –º–æ–¥–µ–ª—å (–ø—É–Ω–∫—Ç 1).")
    except Exception as e:
        print(f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

elif choice == '4':
    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –º–æ–¥–µ–ª—å
        model = np.load('model_weights.npz')
        W1 = model['W1']
        b1 = model['b1']
        W2 = model['W2']
        b2 = model['b2']
        
        # –ó–∞–ø–∏—Ç—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑—Ä–∞–∑–∫—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        try:
            n_samples = int(input("–°–∫—ñ–ª—å–∫–∏ –∑—Ä–∞–∑–∫—ñ–≤ –ø–æ–∫–∞–∑–∞—Ç–∏? (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ 5-10): "))
            n_samples = max(1, min(n_samples, 20))  # –û–±–º–µ–∂—É—î–º–æ –≤—ñ–¥ 1 –¥–æ 20
        except ValueError:
            n_samples = 5
            print("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: 5 –∑—Ä–∞–∑–∫—ñ–≤")
        
        # –í—ñ–∑—É–∞–ª—ñ–∑—É—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –∑—Ä–∞–∑–∫–∏
        visualize_test_samples(W1, b1, W2, b2, n_samples=n_samples)
        
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª –∑ –º–æ–¥–µ–ª–ª—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç—Ä–µ–Ω—É–π—Ç–µ –º–æ–¥–µ–ª—å (–ø—É–Ω–∫—Ç 1).")
    except Exception as e:
        print(f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

else:
    print("‚ùó –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∏–±—ñ—Ä. –û–±–µ—Ä—ñ—Ç—å 1, 2, 3 –∞–±–æ 4.")